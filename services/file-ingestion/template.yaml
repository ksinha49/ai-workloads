AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Lambdas and Step Function for file ingestion.

Globals:
  Function:
    Timeout: 3
    Tracing: Active
    Runtime: python3.13
    Architectures:
      - x86_64
    LoggingConfig:
      LogFormat: JSON

Parameters:
  AWSAccountName:
    Type: String
    Description: AWS Account Name

  LambdaSubnet1ID:
    Type: String
    Description: Subnet ID for Lambda function

  LambdaSubnet2ID:
    Type: String
    Description: Subnet ID for Lambda function

  LambdaSecurityGroupID1:
    Type: String
    Description: Security Group ID for Lambda functions

  LambdaSecurityGroupID2:
    Type: String
    Description: Security Group ID for Lambda functions

  LambdaIAMRoleARN:
    Type: String
    Description: IAM Role ARN for Lambda functions

  FileIngestionStateMachineIAMRole:
    Type: String
    Description: IAM role ARN for step functions

  IDPBucketName:
    Type: String
    Description: IDP bucket where files are ingested

  IDPRawPrefix:
    Type: String
    Default: raw/
    Description: RAW prefix within the IDP bucket

  IngestionStateMachineArn:
    Type: String
    Description: ARN of the RAG ingestion Step Function

  StatusPollSeconds:
    Type: Number
    Default: 200
    Description: Delay between polling for file processing status

  DeleteAfterDays:
    Type: Number
    Default: 1
    Description: Days to retain source objects tagged pending-delete

  CleanupBuckets:
    Type: String
    Default: ''
    Description: Comma separated list of buckets to scan for pending deletes

Resources:
  FileProcessingLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub '${AWSAccountName}-${AWS::StackName}-file-processing-layer'
      Description: Layer for file processing Lambda
      ContentUri: ../../common/layers/file-processing-lambda-layer/
      RetentionPolicy: Delete
      CompatibleRuntimes:
        - python3.13

  FileProcessingStatusLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub '${AWSAccountName}-${AWS::StackName}-file-processing-status-layer'
      Description: Layer for file processing status Lambda
      ContentUri: ../../common/layers/file-processing-status-lambda-layer/
      RetentionPolicy: Delete
      CompatibleRuntimes:
        - python3.13

  DocumentAuditTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DocumentAuditTableName
      AttributeDefinitions:
        - AttributeName: document_id
          AttributeType: S
      KeySchema:
        - AttributeName: document_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  FileProcessingLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWSAccountName}-${AWS::StackName}-file-processing'
      Handler: file_processing_lambda.lambda_handler
      Runtime: python3.13
      CodeUri: ./src/
      Role: !Ref LambdaIAMRoleARN
      MemorySize: 1024
      Timeout: 720
      EphemeralStorage:
        Size: 2068
      Layers:
        - !Ref FileProcessingLambdaLayer
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupID1
          - !Ref LambdaSecurityGroupID2
        SubnetIds:
          - !Ref LambdaSubnet1ID
          - !Ref LambdaSubnet2ID
      Environment:
        Variables:
          AWS_ACCOUNT_NAME: !Ref AWSAccountName
          DOCUMENT_AUDIT_TABLE: !Ref DocumentAuditTableName
          IDP_BUCKET: !Ref IDPBucketName
          RAW_PREFIX: !Ref IDPRawPrefix
          DOCUMENT_AUDIT_TABLE: !Ref DocumentAuditTableName

  FileProcessingLambdaS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${AWSAccountName}-${AWS::StackName}-file-processing-s3'
      Roles:
        - !Select [1, !Split ['/', !Ref LambdaIAMRoleARN]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource: !Sub 'arn:aws:s3:::${IDPBucketName}/*'

  FileProcessingStatusLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWSAccountName}-${AWS::StackName}-file-processing-status'
      Handler: file_processing_status_lambda.lambda_handler
      Runtime: python3.13
      CodeUri: ./src/
      Role: !Ref LambdaIAMRoleARN
      MemorySize: 1024
      Timeout: 480
      EphemeralStorage:
        Size: 2068
      Layers:
        - !Ref FileProcessingStatusLambdaLayer
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupID1
          - !Ref LambdaSecurityGroupID2
        SubnetIds:
          - !Ref LambdaSubnet1ID
          - !Ref LambdaSubnet2ID
      Environment:
        Variables:
          AWS_ACCOUNT_NAME: !Ref AWSAccountName

  FileProcessingStatusLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${AWSAccountName}-${AWS::StackName}-file-processing-status'
      Roles:
        - !Select [1, !Split ['/', !Ref LambdaIAMRoleARN]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${IDPBucketName}/*'

  PendingDeleteCleanupFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWSAccountName}-${AWS::StackName}-pending-delete-cleanup'
      Handler: pending_delete_cleanup_lambda.lambda_handler
      Runtime: python3.13
      CodeUri: ./src/
      Role: !Ref LambdaIAMRoleARN
      MemorySize: 256
      Timeout: 300
      Environment:
        Variables:
          CLEANUP_BUCKETS: !Ref CleanupBuckets
          DELETE_AFTER_DAYS: !Ref DeleteAfterDays

  PendingDeleteCleanupSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 day)
      Targets:
        - Arn: !GetAtt PendingDeleteCleanupFunction.Arn
          Id: cleanup

  PendingDeleteCleanupPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PendingDeleteCleanupFunction.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt PendingDeleteCleanupSchedule.Arn

  DocumentAuditDynamoPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${AWSAccountName}-${AWS::StackName}-document-audit-dynamo'
      Roles:
        - !Select [1, !Split ['/', !Ref LambdaIAMRoleARN]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:GetItem
            Resource: !GetAtt DocumentAuditTable.Arn

  PendingDeleteCleanupPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${AWSAccountName}-${AWS::StackName}-pending-delete-cleanup'
      Roles:
        - !Select [1, !Split ['/', !Ref LambdaIAMRoleARN]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource: !Sub 'arn:aws:s3:::*'
          - Effect: Allow
            Action:
              - s3:GetObjectTagging
              - s3:DeleteObject
              - s3:ListBucket
              - s3:GetObject
            Resource: !Sub 'arn:aws:s3:::*/*'

  FileIngestionSFInvokePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${AWSAccountName}-${AWS::StackName}-file-ingestion-sf-invoke'
      Roles:
        - !Select [1, !Split ['/', !Ref FileIngestionStateMachineIAMRole]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource: !Ref IngestionStateMachineArn

  FileIngestionStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
        Comment: Copy file to IDP and wait for text extraction
        StartAt: file_processing
        States:
          file_processing:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Output: '{% $states.result.Payload %}'
            Arguments:
              FunctionName: !GetAtt FileProcessingLambdaFunction.Arn
              Payload: '{% $states.input %}'
            Retry:
              - ErrorEquals:
                  - States.TaskFailed
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                  - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 3
                BackoffRate: 2
                JitterStrategy: FULL
            Next: Wait
          Wait:
            Type: Wait
            Seconds: !Ref StatusPollSeconds
            Next: FileUploadStatus
          FileUploadStatus:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Output: '{% $states.result.Payload %}'
            Arguments:
              FunctionName: !GetAtt FileProcessingStatusLambdaFunction.Arn
              Payload: '{% $states.input %}'
            Retry:
              - ErrorEquals:
                  - States.TaskFailed
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                  - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 3
                BackoffRate: 2
                JitterStrategy: FULL
            Next: Choice
          Choice:
            Type: Choice
            Choices:
              - Next: Wait
                Condition: '{% $not(($states.input.body.fileupload_status) = ("COMPLETE")) %}'
            Default: start_ingestion
          start_ingestion:
            Type: Task
            Resource: arn:aws:states:::states:startExecution.sync
            Parameters:
              StateMachineArn: !Ref IngestionStateMachineArn
              Input: '{% {"documentId": $states.input.body.document_id, "ingest_params": $states.input.body.ingest_params, "collection_name": $states.input.body.collection_name, "file_guid": $states.input.body.file_guid, "file_name": $states.input.body.file_name} %}'
            End: true
        QueryLanguage: JSONata
      Name: !Sub '${AWSAccountName}-${AWS::StackName}-file-ingestion-sf'
      Type: STANDARD
      Role: !Ref FileIngestionStateMachineIAMRole
      Logging:
        Level: 'OFF'
        IncludeExecutionData: false

Outputs:
  FileIngestionStateMachineArn:
    Description: ARN of the file ingestion state machine
    Value: !Ref FileIngestionStateMachine
  FileProcessingLambdaArn:
    Description: ARN of the file processing Lambda
    Value: !GetAtt FileProcessingLambdaFunction.Arn
  FileProcessingStatusLambdaArn:
    Description: ARN of the file processing status Lambda
    Value: !GetAtt FileProcessingStatusLambdaFunction.Arn
  DocumentAuditTableName:
    Description: Name of the document audit table
    Value: !Ref DocumentAuditTable
  PendingDeleteCleanupLambdaArn:
    Description: ARN of the pending delete cleanup Lambda
    Value: !GetAtt PendingDeleteCleanupFunction.Arn
